/*
c.f. https://msdn.microsoft.com/en-us/library/hh916382.aspx

SAL Basics
SAL defines four basic kinds of parameters, which are categorized by usage pattern.


Input to called function
_In_
Data is passed to the called function, and is treated as read-only.
The parameter must be valid (non NULL) and the value pointed to will not be modified.
The function will only *read* from the *single-element* buffer.
The caller must provide the buffer and initialize it.
_In_ specifies "read-only". A common mistake is to apply _In_ to a parameter that should have the _Inout_ annotation instead.
_In_ is allowed but ignored by the analyzer on non-pointer scalars.
void InCallee(_In_ int *pInt)
{
int i = *pInt;
}

Input to called function, and output to caller
_Inout_
Usable data is passed into the function and potentially is modified.
The pointer must point to valid initialized data before the call, and even if it changes, it must still have a valid value on return. The annotation specifies that the function may freely read from and write to the one-element buffer. The caller must provide the buffer and initialize it.

void InOutCallee(_Inout_ int *pInt)
{
int i = *pInt; // can read
*pInt = 6; // can write
}

Visual Studio Code Analysis validates that callers pass a non-NULL pointer to an initialized buffer for pInt, and that, before return, pInt is still non-NULL and the buffer is initialized.

Output to caller
_Out_
The caller only provides space for the called function to write to. The called function writes data into that space.
supports a common scenario in which a non-NULL pointer that points to an element buffer is passed in and the function initializes the element. The caller doesn’t have to initialize the buffer before the call; the called function promises to initialize it before it returns.
void GoodOutCallee(_Out_ int *pInt)
{
*pInt = 5;
}
void BadOutCallee(_Out_ int *pInt)
{
// Did not initialize pInt buffer before returning!
}

Output of pointer to caller
_Outptr_
Like Output to caller. The value that's returned by the called function is a pointer.
_Outptr_ is used to annotate a parameter that's intended to return a pointer. The parameter itself should not be NULL, and the called function returns a non-NULL pointer in it *and that pointer points to initialized data* (*).

Visual Studio Code Analysis validates that the caller passes a non-NULL pointer for *pInt, and that the buffer is initialized by the function before it returns.

void GoodOutPtrCallee(_Outptr_ int **pInt)
{
int *pInt2 = new int;
*pInt2 = 5;

*pInt = pInt2;
}

void BadOutPtrCallee(_Outptr_ int **pInt)
{
int *pInt2 = new int;
// Did not initialize pInt2 and or pInt to point to valid data buffer before returning! (*)
*pInt = pInt2;
}
---
Optional
void GoodInOptCallee(_In_opt_ int *pInt)
{
if(pInt != NULL) {
int i = *pInt;
}
}

void GoodOutOptCallee(_Out_opt_ int *pInt)
{
if (pInt != NULL) {
*pInt = 5;
}
}

void GoodInOutOptCallee(_Inout_opt_ int *pInt)
{
if(pInt != NULL) {
int i = *pInt;
*pInt = 6;
}
}

void BadInOutOptCallee(_Inout_opt_ int *pInt)
{
int i = *pInt; // Dereferencing NULL pointer ‘pInt’
*pInt = 6;
}

void GoodOutPtrOptCallee(_Outptr_opt_ int **pInt)
{
int *pInt2 = new int;
*pInt2 = 6;

if(pInt != NULL) {
*pInt = pInt2;
}
}

void BadOutPtrOptCallee(_Outptr_opt_ int **pInt)
{
int *pInt2 = new int;
*pInt2 = 6;
*pInt = pInt2; // Dereferencing NULL pointer ‘pInt’
}
*/